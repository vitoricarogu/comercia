```
# üöÄ GUIA COMPLETO DE INSTALA√á√ÉO E CONFIGURA√á√ÉO - SISTEMA DIN√ÇMICA SAAS

Este guia detalha todos os passos necess√°rios para configurar e executar o Sistema Din√¢mica SaaS, garantindo que o frontend, backend e banco de dados (Supabase) estejam perfeitamente conectados e funcionando com dados reais.

## üìã PR√â-REQUISITOS

1.  **Node.js 18+**: Baixe e instale de https://nodejs.org/
2.  **VSCode (Recomendado)**: Baixe de https://code.visualstudio.com/
3.  **Conta Supabase**: Crie uma conta gratuita em https://supabase.com/

## üõ†Ô∏è PASSO A PASSO PARA CONFIGURA√á√ÉO LOCAL

### 1. Clonar o Projeto e Instalar Depend√™ncias

1.  **Abra o terminal** (ou o terminal integrado do VSCode).
2.  **Navegue at√© o diret√≥rio** onde deseja salvar o projeto.
3.  **Clone o reposit√≥rio** (se aplic√°vel) ou descompacte os arquivos do projeto.
4.  **Navegue para a pasta raiz do projeto**:
    ```bash
    cd dinamica-saas
    ```
5.  **Instale as depend√™ncias**:
    ```bash
    npm install
    ```

### 2. Configurar Vari√°veis de Ambiente

As vari√°veis de ambiente s√£o cruciais para a conex√£o entre os servi√ßos.

#### a) Configurar o Frontend (`.env` na raiz do projeto)

1.  **Crie um arquivo** chamado `.env` na **raiz do projeto** (ao lado de `package.json`).
2.  **Copie e cole** o seguinte conte√∫do no arquivo `.env`:
    ```
    VITE_API_URL=http://localhost:3001/api
    VITE_SOCKET_URL=http://localhost:3001
    ```
    *   `VITE_API_URL`: URL base para as requisi√ß√µes da API do backend.
    *   `VITE_SOCKET_URL`: URL para a conex√£o WebSocket do Socket.IO.

#### b) Configurar o Backend (`server/.env`)

1.  **Navegue at√© a pasta `server/`**:
    ```bash
    cd server
    ```
2.  **Crie um arquivo** chamado `.env` dentro da pasta `server/`.
3.  **Copie o conte√∫do de `server/.env.example`** e cole no seu novo arquivo `server/.env`.
4.  **Preencha as seguintes vari√°veis** com suas credenciais do Supabase:
    *   **`SUPABASE_URL`**:
        *   V√° para o painel do Supabase: `https://supabase.com/dashboard/projects/<your-project-ref>/settings/api`
        *   Copie a "Project URL".
        *   Exemplo: `SUPABASE_URL=https://abcdefghijk.supabase.co`
    *   **`SUPABASE_SERVICE_ROLE_KEY`**:
        *   Na mesma p√°gina de API Settings do Supabase, encontre a "Service Role (secret)" key.
        *   Copie esta chave. **Mantenha-a em segredo!**
        *   Exemplo: `SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImFiY2RlZmdoaWprIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTY3ODkwMTIzNCwiZXhwIjoxOTk0MjY1NDU2fQ.YOUR_SERVICE_ROLE_KEY_HERE`
    *   **`JWT_SECRET`**:
        *   Crie uma string longa e complexa (pode ser uma sequ√™ncia aleat√≥ria de caracteres).
        *   Exemplo: `JWT_SECRET=uma_chave_secreta_muito_longa_e_complexa_para_producao_troque_isso`
    *   **`CORS_ORIGIN`**:
        *   Defina a URL do seu frontend.
        *   Exemplo: `CORS_ORIGIN=http://localhost:5173`
    *   **`PORT`**:
        *   A porta que o backend ir√° escutar.
        *   Exemplo: `PORT=3001`
    *   **`NODE_ENV`**:
        *   Ambiente de execu√ß√£o.
        *   Exemplo: `NODE_ENV=development`

    Seu arquivo `server/.env` deve ficar parecido com isto (com suas chaves reais):
    ```
    # Supabase Configuration
    SUPABASE_URL=https://your-project-ref.supabase.co
    SUPABASE_SERVICE_ROLE_KEY=your-supabase-service-role-key

    # JWT Configuration
    JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

    # Server Configuration
    PORT=3001
    NODE_ENV=development

    # API Keys para Integra√ß√µes de IA (configure via painel admin)
    OPENAI_API_KEY=
    GOOGLE_GEMINI_API_KEY=
    HUGGINGFACE_API_KEY=

    # WhatsApp Business API Configuration (configure via usu√°rio)
    WHATSAPP_ACCESS_TOKEN=
    WHATSAPP_PHONE_NUMBER_ID=
    WHATSAPP_WEBHOOK_VERIFY_TOKEN=

    # Security
    SESSION_SECRET=your-session-secret-change-this
    ENCRYPTION_KEY=your-encryption-key-32-chars-change-this

    # Rate Limiting
    RATE_LIMIT_WINDOW_MS=900000
    RATE_LIMIT_MAX_REQUESTS=100

    # CORS
    CORS_ORIGIN=http://localhost:5173

    # Logging
    LOG_LEVEL=info

    # File Upload
    MAX_FILE_SIZE=10485760
    UPLOAD_DIR=uploads

    # Payment Configuration (if applicable)
    STRIPE_SECRET_KEY=
    STRIPE_PUBLISHABLE_KEY=
    STRIPE_WEBHOOK_SECRET=
    PAYPAL_CLIENT_ID=
    PAYPAL_CLIENT_SECRET=
    PAYPAL_MODE=sandbox
    PIX_MERCHANT_ID=
    PIX_MERCHANT_NAME=
    PIX_MERCHANT_CITY=
    PIX_KEY=
    ```
    *   Volte para a raiz do projeto: `cd ..`

### 3. Configurar o Banco de Dados Supabase

1.  **Acesse o painel do Supabase**: `https://supabase.com/dashboard`
2.  **Selecione seu projeto**.
3.  No menu lateral, v√° para **"SQL Editor"**.
4.  **Abra o arquivo `supabase/migrations/20250921234147_orange_canyon.sql`** no seu editor de c√≥digo.
5.  **Copie todo o conte√∫do** deste arquivo.
6.  **Cole o conte√∫do no SQL Editor** do Supabase e clique em **"RUN"** para executar as migra√ß√µes e criar todas as tabelas necess√°rias.

### 4. Inserir Dados Iniciais (Opcional, mas Recomendado)

Para ter usu√°rios de teste e dados b√°sicos, execute os seguintes comandos SQL no SQL Editor do Supabase (ap√≥s a migra√ß√£o):

```sql
-- Inserir usu√°rios de teste
INSERT INTO users (id, name, email, password, role, plan, is_active) VALUES
('a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11', 'Admin Sistema', 'admin@dinamica.com', '$2a$12$hash_da_senha_admin123', 'admin', 'enterprise', true),
('b0eebc99-9c0b-4ef8-bb6d-6bb9bd380a12', 'Usu√°rio Teste', 'teste@dinamica.com', '$2a$12$hash_da_senha_teste123', 'user', 'free', true),
('c0eebc99-9c0b-4ef8-bb6d-6bb9bd380a13', 'Barbearia Teste', 'barbearia@dinamica.com', '$2a$12$hash_da_senha_barbearia123', 'barbearia', 'basic', true);

-- ATEN√á√ÉO: Substitua 'hash_da_senha_admin123', 'hash_da_senha_teste123', 'hash_da_senha_barbearia123'
-- por hashes reais gerados com bcrypt para as senhas 'admin123', 'teste123', 'barbearia123' respectivamente.
-- Voc√™ pode gerar esses hashes usando um script Node.js simples:
-- const bcrypt = require('bcryptjs');
-- bcrypt.hash('sua_senha', 12).then(hash => console.log(hash));

-- Inserir servi√ßos padr√£o para barbearia (usando o ID do usu√°rio 'barbearia@dinamica.com')
INSERT INTO servicos (user_id, nome, descricao, preco, duracao, is_active) VALUES
((SELECT id FROM users WHERE email = 'barbearia@dinamica.com'), 'Corte Masculino', 'Corte de cabelo masculino tradicional', 25.00, 30, true),
((SELECT id FROM users WHERE email = 'barbearia@dinamica.com'), 'Barba', 'Aparar e modelar barba', 15.00, 20, true),
((SELECT id FROM users WHERE email = 'barbearia@dinamica.com'), 'Cabelo + Barba', 'Corte completo com barba', 35.00, 45, true),
((SELECT id FROM users WHERE email = 'barbearia@dinamica.com'), 'Sobrancelha', 'Design de sobrancelha masculina', 10.00, 15, true);
```
*   **Importante**: Os `id`s dos usu√°rios (`a0eebc99-9c0b-4ef8-bb6d-6bb9bd380a11`, etc.) s√£o exemplos. O Supabase gera UUIDs automaticamente. Se voc√™ n√£o especificar o `id`, ele ser√° gerado. Se voc√™ quiser IDs espec√≠ficos para testes, certifique-se de que eles sejam UUIDs v√°lidos e √∫nicos.
*   **Gera√ß√£o de Hash de Senha**: As senhas no SQL acima s√£o placeholders. Voc√™ **DEVE** gerar os hashes bcrypt reais para as senhas `admin123`, `teste123` e `barbearia123` e substitu√≠-los no script SQL antes de executar.

### 5. Iniciar o Sistema

1.  **Abra dois terminais** na raiz do projeto (`dinamica-saas/`).

2.  **No primeiro terminal, inicie o Backend**:
    ```bash
    npm run server:dev
    ```
    Aguarde a mensagem: `üöÄ Sistema Din√¢mica SaaS v2.0` e `‚úÖ Supabase conectado com sucesso`.

3.  **No segundo terminal, inicie o Frontend**:
    ```bash
    npm run dev
    ```
    Aguarde a mensagem: `Local: http://localhost:5173`

### 6. Acessar o Sistema

*   **Frontend**: Abra seu navegador e acesse `http://localhost:5173`
*   **Backend API Health Check**: `http://localhost:3001/api/health`
*   **P√°gina de Testes**: `http://localhost:5173/teste`

### 7. Credenciais de Acesso Padr√£o

*   **Admin**: `admin@dinamica.com` / `admin123`
*   **Usu√°rio Teste**: `teste@dinamica.com` / `teste123`
*   **Barbearia**: `barbearia@dinamica.com` / `barbearia123`

## ‚öôÔ∏è CONFIGURA√á√ïES ADICIONAIS (VIA INTERFACE DO SISTEMA)

Ap√≥s o login, voc√™ pode configurar as APIs de IA e as integra√ß√µes de WhatsApp/Email atrav√©s do painel do sistema.

### 1. APIs Globais de IA (Painel Administrativo)

*   **Login como Admin**: `admin@dinamica.com` / `admin123`
*   V√° para **"Painel Administrativo"** -> **"APIs Globais"**.
*   Insira suas chaves de API para:
    *   **Google Gemini**: Obtenha em `https://makersuite.google.com/app/apikey`
    *   **OpenAI**: Obtenha em `https://platform.openai.com/api-keys`
    *   **Hugging Face**: Obtenha em `https://huggingface.co/settings/tokens`
*   Clique em "Salvar" para cada chave.

### 2. Configura√ß√µes de WhatsApp e Email (Painel do Usu√°rio)

*   **Login como Usu√°rio Regular** (`teste@dinamica.com` / `teste123`) ou **Barbearia** (`barbearia@dinamica.com` / `barbearia123`).
*   V√° para **"APIs"** no menu lateral.
*   **WhatsApp Business API**:
    *   Clique em "Adicionar WhatsApp".
    *   Preencha `Nome`, `Access Token`, `Phone Number ID` (obtenha no Meta Business Account: `https://developers.facebook.com/docs/whatsapp`).
    *   Clique em "Salvar" e depois em "Testar" para verificar a conex√£o.
*   **Configura√ß√µes de Email**:
    *   Preencha os detalhes do seu servidor SMTP (`Servidor SMTP`, `Porta`, `Usu√°rio`, `Senha`, `Nome do Remetente`, `Email do Remetente`).
    *   Clique em "Salvar Configura√ß√µes de Email".

## üßπ LIMPEZA DE ARQUIVOS

*   O arquivo `server/handlers/socketHandlers.js` foi removido, pois era obsoleto e n√£o utilizado.

## ‚úÖ GARANTIAS

*   **Conex√£o Real**: Todos os dados s√£o persistidos e recuperados do Supabase, sem dados mockados.
*   **CSS Funcional**: Tailwind CSS carregado via CDN, garantindo estilos consistentes.
*   **APIs Integradas**: Frontend e Backend se comunicam usando URLs configur√°veis, e o backend se conecta ao Supabase.
*   **Tratamento de Erros**: `ErrorBoundary` no frontend e tratamento robusto no backend para uma experi√™ncia mais est√°vel.

**Seu sistema est√° agora pronto para ser usado e testado!**
```